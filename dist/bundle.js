(()=>{var e={637:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BattleshipGame=void 0;class a{constructor(){this.data={player1:{ships:[],board:void 0,guesses:new Map,sunkShips:[]},player2:{ships:[],board:void 0,guesses:new Map,sunkShips:[]}},this.status=a.Status.Prestart}setBattleships(e,t){if(t.length<a.battleshipsTemplate.length)throw new a.InvalidParametersError("Too few battleships. No ships placed.");if(t.map((e=>e.length)).sort().join("")!==a.battleshipsTemplate.map((e=>e.length)).sort().join(""))throw new a.InvalidParametersError("Invalid ships: Ships are the wrong sizes. No ships placed");if(this.status!==a.Status.Prestart)throw new a.OutOfTurnError("Battleships cannot be placed at this time. No ships placed.");const r=new Array(10).fill(new Array(10).fill(!1));for(const e of t)for(const t of e){if(t.row<0||t.column<0||t.row>9||t.column>9)throw new RangeError("Battleship placed out of bounds. No ships placed.");if(r[t.row][t.column])throw new Error("Overlap between battleships. No ships placed.");r[t.row][t.column]=!0}this.data[e].board=r,this.data[e].ships=t,void 0!==this.data.player1.board&&void 0!==this.data.player2.board&&(this.status=a.Status.Player1Turn)}shootTarget(e,t){if(e===a.Player.Player1&&this.status!==a.Status.Player1Turn)throw new a.OutOfTurnError("Target cannot be attacked at this time. No action was performed.");if(e===a.Player.Player2&&this.status!==a.Status.Player2Turn)throw new a.OutOfTurnError("Target cannot be attacked at this time. No action was performed.");if(t.row<0||t.column<0||t.row>9||t.column>9)throw new RangeError("Target out of bounds. No action was performed.");if(this.data[e].guesses.has(JSON.stringify(t)))throw new Error("Target already attacked. No action was performed.");this.status=this.status===a.Status.Player1Turn?a.Status.Player2Turn:a.Status.Player1Turn;const r=e===a.Player.Player1?a.Player.Player2:a.Player.Player1;for(const s of this.data[r].ships)for(const o of s)if(t.row===o.row&&t.column===o.column){this.data[e].guesses.set(JSON.stringify(t),!0);for(const t of s)if(!this.data[e].guesses.has(JSON.stringify(t)))return{isHit:!0,sunkShips:null};return this.data[e].sunkShips.push(s),this.data[e].sunkShips.length===this.data[r].ships.length&&(this.status=a.Status.GameOver),{isHit:!0,sunkShips:s}}return this.data[e].guesses.set(JSON.stringify(t),!1),{isHit:!1,sunkShips:null}}getData(e){return this.data[e]}}t.BattleshipGame=a,a.emptyBoard=new Array(10).fill(new Array(10).fill(!1)),a.battleshipsTemplate=[new Array(5),new Array(4),new Array(3),new Array(3),new Array(2)],function(e){let t,a;!function(e){e[e.Prestart=0]="Prestart",e[e.Player1Turn=1]="Player1Turn",e[e.Player2Turn=2]="Player2Turn",e[e.GameOver=3]="GameOver"}(t=e.Status||(e.Status={})),function(e){e.Player1="player1",e.Player2="player2"}(a=e.Player||(e.Player={}));class r extends Error{constructor(e){super(e),this.name="OutOfTurnError"}}e.OutOfTurnError=r;class s extends Error{constructor(e){super(e),this.name="InvalidParametersError"}}e.InvalidParametersError=s}(a||(t.BattleshipGame=a={}))},653:e=>{e.exports={getIndex:(e,t)=>{},getCSS:(e,t)=>{}}},365:(e,t,a)=>{const r=a(637),s={},o={},n=()=>{const e=Date.now().toString().substring(7),t=Math.trunc(1e3*Math.random()).toString();return Number.parseInt(t+e,10).toString(36)},i=(e,t,a,r)=>{t.writeHead(r,{"Content-Type":"application/json"}),t.write(JSON.stringify(a)),t.end()},u=(e,t,a)=>{t.writeHead(a,{"Content-Type":"application/json"}),t.end()};e.exports={getBoardTemplate:(e,t)=>{const a={board:r.BattleshipGame.emptyBoard};return i(0,t,a,200)},getBattleshipTemplate:(e,t)=>{const a={battleships:r.BattleshipGame.battleshipsTemplate};return i(0,t,a,200)},getStatus:(e,t,{gameId:a})=>{if(!a)return i(0,t,{id:"getStatusMissingParams",message:"Must have query parameter 'gameId'."},400);if(!s[a])return i(0,t,{id:"getStatusNotFound",message:"No game found with that ID"},404);const r={status:["pendingStart","hostTurn","guestTurn","gameOver"][s[a].status]};return i(0,t,r,200)},getGameData:(e,t,{gameId:a,playerId:r})=>{if(!a||!r)return i(0,t,{id:"getGameDataMissingParams",message:"Must have query parameters 'gameId' and 'playerId'."},400);if(!s[a])return i(0,t,{id:"getGameDataGameNotFound",message:"No game found with that ID"},404);if(!o[r])return i(0,t,{id:"getGameDataPlayerNotFound",message:"No player found with that ID"},404);const n={data:s[a].getData(o[r])};return i(0,t,n,200)},getNotFound:(e,t)=>i(0,t,{id:"notFound",message:"No endpoint found at the requested path"},404),getBoardTemplateMeta:(e,t)=>u(0,t,200),getBattleshipTemplateMeta:(e,t)=>{u(0,t,200)},getStatusMeta:(e,t,{gameId:a})=>a?s[a]?u(0,t,200):i(0,t,404):u(0,t,400),getGameDataMeta:(e,t,{gameId:a,playerId:r})=>a&&r?s[a]&&o[r]?u(0,t,200):u(0,t,404):u(0,t,400),getNotFoundMeta:(e,t)=>u(0,t,404),createGame:(e,t)=>{const a=n(),u=n();s[a]=new r.BattleshipGame,o[u]=r.BattleshipGame.Player.Player1,i(0,t,{gameId:a,playerId:u},201)},joinGame:(e,t,{gameId:a})=>{if(!a)return i(0,t,{id:"joinGameMissingParams",message:"Must have query parameter 'gameId'."},400);if(!s[a])return i(0,t,{id:"joinGameGameNotFound",message:"No game found with that ID"},404);const u=n();return o[u]=r.BattleshipGame.Player.Player2,i(0,t,{playerId:u},200)},setBattleships:(e,t,{gameId:a,playerId:r},{battleships:n})=>{if(!a||!r)return i(0,t,{id:"readyMissingQueryParams",message:"Must have query parameters 'gameId' and 'playerId'."},400);if(!n)return i(0,t,{id:"readyMissingBodyParams",message:"Request submitted without battleships."},400);if(!s[a])return i(0,t,{id:"readyGameNotFound",message:"No game found with that ID"},404);if(!o[r])return i(0,t,{id:"readyPlayerNotFound",message:"No player found with that ID"},404);try{return s[a].setBattleships(o[r],n),u(0,t,204)}catch(e){switch(e.name){case"OutOfTurnError":{const a={id:"readyForbidden",message:e.message};return i(0,t,a,403)}case"InvalidParametersError":{const a={id:"readyInvalidParameters",message:e.message};return i(0,t,a,400)}case"RangeError":case"Error":{const a={id:"readyBattleshipError",message:e.message};return i(0,t,a,422)}default:return i(0,t,{id:"readyInternal",message:"A server error occured that prevented the action from being performed"},500)}}},shootTarget:(e,t,{gameId:a,playerId:r},{target:n})=>{if(!a||!r)return i(0,t,{id:"shootTargetMissingQueryParams",message:"Must have query parameters 'gameId' and 'playerId'."},400);if(!n)return i(0,t,{id:"shootTargetMissingBodyParams",message:"Request submitted without target."},400);if(void 0===n.x||void 0===n.y)return i(0,t,{id:"shootTargetInvalidParameters",message:"target must contain both an 'x' and 'y' value."},400);if(!s[a])return i(0,t,{id:"shootTargetGameNotFound",message:"No game found with that ID"},404);if(!o[r])return i(0,t,{id:"shootTargetPlayerNotFound",message:"No player found with that ID"},404);try{const e=s[a].shootTarget(o[r],n);return i(0,t,e,200)}catch(e){switch(e.name){case"OutOfTurnError":{const a={id:"shootTargetForbidden",message:e.message};return i(0,t,a,403)}case"RangeError":case"Error":{const a={id:"shootTargetTargetError",message:e.message};return i(0,t,a,422)}default:return i(0,t,{id:"readyInternal",message:"A server error occured that prevented the action from being performed"},500)}}}}},685:e=>{"use strict";e.exports=require("http")},477:e=>{"use strict";e.exports=require("querystring")},310:e=>{"use strict";e.exports=require("url")}},t={};function a(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,a),o.exports}(()=>{const e=a(685),t=a(310),r=a(477),s=a(365),o=a(653),n=process.env.PORT||process.env.NODE_PORT||3e3,i={GET:{"/":o.getIndex,"/style.css":o.getCSS,"/boardTemplate":s.getBoardTemplate,"/battleshipTemplate":s.getBattleshipTemplate,"/status":s.getStatus,"/data":s.getGameData,notFound:s.getNotFound},HEAD:{"/boardTemplate":s.getBoardTemplateMeta,"/battleshipTemplate":s.getBattleshipTemplateMeta,"/status":s.getStatusMeta,"/data":s.getGameDataMeta,notFound:s.getNotFoundMeta},POST:{"/new":s.createGame,"/join":s.joinGame,"/ready":s.setBattleships,"/shoot":s.shootTarget,notFound:s.getNotFoundMeta}};e.createServer(((e,a)=>{const s=t.parse(e.url),o=r.parse(s.query);return i[e.method]?i[e.method][s.pathname]?i[e.method][s.pathname](e,a,o):i[e.method].notFound(e,a):i.HEAD.notFound(e,a)})).listen(n,(()=>{console.log(`Listening on 127.0.0.1:${n}`)}))})()})();