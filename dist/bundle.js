(()=>{var t={637:(t,a)=>{"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.BattleshipGame=void 0;class s{constructor(){this.data={player1:{ships:[],board:void 0,guesses:new Map,sunkShips:[]},player2:{ships:[],board:void 0,guesses:new Map,sunkShips:[]}},this.status=s.Status.Prestart}setBattleships(t,a){if(this.status!==s.Status.Prestart)throw new Error("Battleships cannot be placed at this time.");const e=new Array(10).fill(new Array(10).fill(!1));for(const t of a)for(const a of t){if(a.row<0||a.column<0||a.row>9||a.column>9)throw new RangeError("Battleship placed out of bounds. No ships placed.");if(e[a.row][a.column])throw new Error("Overlap between battleships. No ships placed.");e[a.row][a.column]=!0}this.data[t].board=e,this.data[t].ships=a,void 0!==this.data.player1.board&&void 0!==this.data.player2.board&&(this.status=s.Status.Player1Turn)}shootTarget(t,a){if(t===s.Player.Player1&&this.status!==s.Status.Player1Turn)throw new Error("Target cannot be attacked at this time. No action was performed.");if(t===s.Player.Player2&&this.status!==s.Status.Player2Turn)throw new Error("Target cannot be attacked at this time. No action was performed.");if(a.row<0||a.column<0||a.row>9||a.column>9)throw new RangeError("Target out of bounds. No action was performed.");if(this.data[t].guesses.has(JSON.stringify(a)))throw new Error("Target already attacked. No action was performed.");this.status=this.status===s.Status.Player1Turn?s.Status.Player2Turn:s.Status.Player1Turn;const e=t===s.Player.Player1?s.Player.Player2:s.Player.Player1;for(const r of this.data[e].ships)for(const o of r)if(a.row===o.row&&a.column===o.column){this.data[t].guesses.set(JSON.stringify(a),!0);for(const a of r)if(!this.data[t].guesses.has(JSON.stringify(a)))return{isHit:!0,sunkShips:null};return this.data[t].sunkShips.push(r),this.data[t].sunkShips.length===this.data[e].ships.length&&(this.status=s.Status.GameOver),{isHit:!0,sunkShips:r}}return this.data[t].guesses.set(JSON.stringify(a),!1),{isHit:!1,sunkShips:null}}}a.BattleshipGame=s,function(t){let a,s;!function(t){t[t.Prestart=0]="Prestart",t[t.Player1Turn=1]="Player1Turn",t[t.Player2Turn=2]="Player2Turn",t[t.GameOver=3]="GameOver"}(a=t.Status||(t.Status={})),function(t){t.Player1="player1",t.Player2="player2"}(s=t.Player||(t.Player={}))}(s||(a.BattleshipGame=s={}))}},a={};function s(e){var r=a[e];if(void 0!==r)return r.exports;var o=a[e]={exports:{}};return t[e](o,o.exports,s),o.exports}(()=>{const t=s(637),a=new t.BattleshipGame;a.setBattleships(t.BattleshipGame.Player.Player1,[[{row:0,column:1},{row:0,column:2},{row:0,column:3}]]),a.setBattleships(t.BattleshipGame.Player.Player2,[[{row:1,column:1},{row:1,column:2},{row:1,column:3}]]),console.log(a.shootTarget(t.BattleshipGame.Player.Player1,{row:1,column:1})),console.log(a.shootTarget(t.BattleshipGame.Player.Player2,{row:1,column:1})),console.log(a.shootTarget(t.BattleshipGame.Player.Player1,{row:1,column:1})),console.log(a.shootTarget(t.BattleshipGame.Player.Player2,{row:1,column:2})),console.log(a.shootTarget(t.BattleshipGame.Player.Player1,{row:1,column:3})),console.log(a.status)})()})();